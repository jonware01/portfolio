package com.jware.apriori.data;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.jware.apriori.common.Constants;
import com.jware.apriori.model.Item;
import com.jware.apriori.model.ItemSet;
import com.jware.apriori.model.Order;
import com.jware.apriori.model.OrderList;

/**
 * This is the data loader which loads the database from files that were
 * previously generated by the <code>DataGenerator</code>.
 * 
 * @author jww25@njit.edu
 */
public class DataLoader {
	private static DataLoader instance;

	// Databases
	private List<OrderList> databases = new ArrayList<>();

	/**
	 * Private constructor.
	 */
	private DataLoader() {
		try {
			int databaseNum = 0;
			String fileName = String.format(Constants.DB_FILE_FORMAT, databaseNum);
			File databaseFile = new File(fileName);

			// While I can access the database file (read all databases)
			while (databaseFile.exists() && databaseFile.canRead()) {
				int transactionNum = 0;
				OrderList orders = new OrderList();
				
				// Generate the transaction key
				String transactionKey = String.format(Constants.TRANSACTION_FORMAT, transactionNum);
				Properties database = new Properties();
				database.load(new FileInputStream(fileName));

				// While the transaction key is valid (read all transactions)
				while (database.containsKey(transactionKey)) {
					// Get the item set
					ItemSet items = Item.toItems(database.get(transactionKey).toString().split(Constants.COMMA));
					
					// Add it to the order
					orders.add(new Order(items));
					
					// Update the transaction key
					transactionKey = String.format(Constants.TRANSACTION_FORMAT, ++transactionNum);
				}

				// Add the orders
				databases.add(orders);
				
				// Update the file name
				fileName = String.format(Constants.DB_FILE_FORMAT, ++databaseNum);
				
				// Update the file pointer
				databaseFile = new File(fileName);
			}
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Get an instance of the data loader.
	 * 
	 * @return <code>DataLoader</code> instance
	 */
	public static synchronized DataLoader instance() {
		if (instance == null) {
			instance = new DataLoader();
		}

		return instance;
	}

	/**
	 * Get the order list from a database.
	 * 
	 * @param databaseNum
	 *            Database number to retrieve
	 * @return the <code>OrderList</code>
	 */
	public OrderList getOrderList(final int databaseNum) {
		return databases.get(databaseNum);
	}
}